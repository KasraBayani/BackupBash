name: BackupBash Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Add more Bash versions if needed
        bash: ['5.2']
        compression: [none, gzip, bzip2, zip, tar]
        encryption_method: ["AES-256-CBC", "ChaCha20"]
        include:
          - os: ubuntu-latest
            bash: 4.4

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Bash
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install shellcheck
      run: |
        if [[ ${{ matrix.os }} == 'ubuntu-latest' ]]; then
          sudo apt-get update
          sudo apt-get install -y shellcheck
        elif [[ ${{ matrix.os }} == 'macos-latest' ]]; then
          brew update
          brew install shellcheck
        fi

    - name: Run shellcheck
      run: shellcheck BackupBash

    - name: Set up test environment
      run: |
        mkdir -p test_source test_destination test_restore
        echo "This is a test file" > test_source/file1.txt
        echo "Another test file" > test_source/file2.txt
        mkdir test_source/subdir
        echo "File in subdir" > test_source/subdir/file3.txt
        echo "File with spaces" > "test_source/file with spaces.txt"
        touch test_source/empty_file.txt

    - name: Install dependencies
      run: |
        if [[ ${{ matrix.os }} == 'ubuntu-latest' ]]; then
          sudo apt-get update
          sudo apt-get install -y openssl zip tar
        elif [[ ${{ matrix.os }} == 'macos-latest' ]]; then
          brew update
          brew install openssl
          brew install gnu-tar # Use GNU tar on macOS for consistency
        fi

    - name: Run BackupBash install
      run: bash BackupBash install

    - name: Run backup test (compression matrix)
      run: |
        BackupBash backup -s test_source -d test_destination -n test_backup -c ${{ matrix.compression }} -e no
        
    - name: Verify backup file exists (compression matrix)
      run: |
        if [[ "${{ matrix.compression }}" == "none" ]]; then
          if [ ! -f test_destination/test_backup_*.tar ]; then
            echo "Backup file not found for ${{ matrix.compression }} (expected .tar)!"
            exit 1
          fi
        else
          if [ ! -f test_destination/test_backup_*.${{ matrix.compression }} ]; then
            echo "Backup file not found for ${{ matrix.compression }}!"
            exit 1
          fi
        fi

    - name: Run restore test (compression matrix)
      run: |
        if [[ "${{ matrix.compression }}" == "none" ]]; then
          BackupBash restore -f test_destination/test_backup_*.tar -r test_restore
        else
          BackupBash restore -f test_destination/test_backup_*.${{ matrix.compression }} -r test_restore
        fi
    
    - name: Verify restored files (compression matrix)
      run: |
        if [ ! -f test_restore/file1.txt ]; then
          echo "Restored file1.txt not found!"
          exit 1
        fi
        if [ ! -f test_restore/subdir/file3.txt ]; then
          echo "Restored subdir/file3.txt not found!"
          exit 1
        fi
        if [ ! -f "test_restore/file with spaces.txt" ]; then
          echo "Restored 'file with spaces.txt' not found!"
          exit 1
        fi

    - name: Run backup test (encryption matrix)
      if: matrix.compression == 'gzip' # Only run encryption tests with gzip for brevity
      run: |
        BackupBash backup -s test_source -d test_destination -n test_backup_enc -c ${{ matrix.compression }} -e yes -m ${{ matrix.encryption_method }} -k "TestKey12345!"

    - name: Verify encrypted backup file exists (encryption matrix)
      if: matrix.compression == 'gzip'
      run: |
        if [ ! -f test_destination/test_backup_enc_*.tar.gz.enc ]; then
          echo "Encrypted backup file not found for ${{ matrix.encryption_method }}!"
          exit 1
        fi

    - name: Run restore test (encryption matrix)
      if: matrix.compression == 'gzip'
      run: |
        BackupBash restore -f test_destination/test_backup_enc_*.tar.gz.enc -r test_restore -k "TestKey12345!"

    - name: Verify restored files (encryption matrix)
      if: matrix.compression == 'gzip'
      run: |
        if [ ! -f test_restore/file2.txt ]; then
          echo "Restored file2.txt (encrypted) not found!"
          exit 1
        fi
        if [ ! -f "test_restore/file with spaces.txt" ]; then
          echo "Restored 'file with spaces.txt' (encrypted) not found!"
          exit 1
        fi

    - name: Test error handling (invalid encryption key)
      if: matrix.compression == 'gzip' && matrix.encryption_method == 'AES-256-CBC'
      run: |
        set +e # Continue even if a command fails
        BackupBash restore -f test_destination/test_backup_enc_*.tar.gz.enc -r test_restore -k "WrongKey"
        if [[ $? -eq 0 ]]; then
          echo "Restore with invalid key should have failed!"
          exit 1
        fi
        set -e # Re-enable error checking

    # Add more error handling tests as needed...

    - name: Test empty source directory
      run: |
        rm -rf test_source/*
        BackupBash backup -s test_source -d test_destination -n test_empty -c none -e no

    - name: Verify empty backup created
      run: |
        if [ ! -f test_destination/test_empty_*.tar ]; then
          echo "Empty backup file (.tar) not found!"
          exit 1
        fi
